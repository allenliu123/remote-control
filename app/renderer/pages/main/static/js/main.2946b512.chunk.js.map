{"version":3,"sources":["peer-puppet.js","App.js","reportWebVitals.js","index.js","../external \"electron\""],"names":["require","desktopCapturer","ipcRenderer","getScreenStream","a","getSources","types","sources","Promise","resolve","reject","navigator","webkitGetUserMedia","audio","video","mandatory","chromeMediaSource","chromeMediaSourceId","id","maxWidth","window","screen","width","maxHeight","height","stream","err","console","log","pc","RTCPeerConnection","onicecandidate","e","JSON","stringify","candidate","send","on","addIceCandidate","parse","candidates","RTCIceCandidate","push","remoteDescription","type","i","length","createAnswer","offer","screenStream","addStream","setRemoteDescription","setLocalDescription","localDescription","answer","sdp","App","useState","remoteCode","setRemoteCode","localCode","setLocalCode","controlText","setControlText","login","invoke","code","useEffect","handleControlState","removeListener","name","text","className","value","onChange","target","onClick","startControl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.2946b512.chunk.js","sourcesContent":["// createAnswer\r\nconst { desktopCapturer, ipcRenderer } = require('electron')\r\n\r\nasync function getScreenStream() {\r\n  const sources = await desktopCapturer.getSources({ types: ['screen'] })\r\n  return new Promise((resolve, reject) => {\r\n    navigator.webkitGetUserMedia({\r\n      audio: false,\r\n      video: {\r\n        mandatory: {\r\n          chromeMediaSource: 'desktop',\r\n          chromeMediaSourceId: sources[0].id,\r\n          maxWidth: window.screen.width,\r\n          maxHeight: window.screen.height\r\n        }\r\n      }\r\n    }, (stream) => {\r\n      resolve(stream)\r\n      // peer.emit('add-stream', stream)\r\n    }, (err) => {\r\n      console.log(err)\r\n    })\r\n  })\r\n}\r\n\r\nconst pc = new window.RTCPeerConnection({})\r\n\r\npc.onicecandidate = function(e) {\r\n  console.log('candidate', JSON.stringify(e.candidate))\r\n  if (e.candidate) {\r\n    console.log('send', e.candidate)\r\n    ipcRenderer.send('forward', 'puppet-candidate', JSON.stringify(e.candidate))\r\n  }\r\n}\r\nipcRenderer.on('candidate', (e, candidate) => {\r\n  console.log('on candidate', candidate)\r\n  addIceCandidate(JSON.parse(candidate))\r\n})\r\n\r\nwindow.addIceCandidate = addIceCandidate\r\n\r\nlet candidates = []\r\nasync function addIceCandidate(candidate) {\r\n  pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n  if (candidate) {\r\n    candidates.push(candidate)\r\n  }\r\n  \r\n  if (pc.remoteDescription && pc.remoteDescription.type) {\r\n    for(let i = 0; i < candidates.length; i++) {\r\n      await pc.addIceCandidate(new RTCIceCandidate(candidate))\r\n    }\r\n    candidates = []\r\n  }\r\n}\r\n\r\nipcRenderer.on('offer', async (e, offer) => {\r\n  console.log('on offer, createAnswer')\r\n  let answer = await createAnswer(offer)\r\n  ipcRenderer.send('forward', 'answer', { type: answer.type, sdp: answer.sdp })\r\n})\r\nasync function createAnswer(offer) {\r\n  let screenStream = await getScreenStream()\r\n  pc.addStream(screenStream)\r\n  await pc.setRemoteDescription(offer)\r\n  await pc.setLocalDescription(await pc.createAnswer())\r\n  console.log('answer', JSON.stringify(pc.localDescription))\r\n  return pc.localDescription\r\n}","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { ipcRenderer } from 'electron';\nimport './peer-puppet.js';\n\nfunction App() {\n  const [remoteCode, setRemoteCode] = useState('');\n  const [localCode, setLocalCode] = useState('');\n  const [controlText, setControlText] = useState('');\n  const login = async () => {\n    let code = await ipcRenderer.invoke('login');\n    setLocalCode(code);\n  }\n  useEffect(() => {\n    login();\n    ipcRenderer.on('control-state-change', handleControlState)\n    return () => {\n      ipcRenderer.removeListener('control-state-change', handleControlState)\n    }\n  }, [])\n  const startControl = (remoteCode) => {\n    console.log(111);\n    ipcRenderer.send('control', remoteCode);\n    console.log(remoteCode)\n  }\n  const handleControlState = (e, name, type) => {\n    console.log('name', name)\n    let text = ''\n    if (type === 1) {\n      text = `正在远程控制${name}`\n    } else if (type === 2) {\n      text = `正在被${name}远程控制`\n    }\n    setControlText(text);\n  }\n\n  return (\n    <div className=\"App\">\n      {\n        controlText === '' ? <div>\n          <div>你的控制码{localCode}</div>\n          <input type=\"text\" value={remoteCode} onChange={e => setRemoteCode(e.target.value)} />\n          <button onClick={() => startControl(remoteCode)}>确认</button>\n        </div> : <div>{controlText}</div>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = require(\"electron\");"],"sourceRoot":""}